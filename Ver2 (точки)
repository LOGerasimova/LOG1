#include "opencv\cv.h"
#include "opencv\highgui.h"
#include "opencv2/opencv.hpp"

using namespace cv;
#include <istream>
#include <stdint.h>

#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"

Mat frame, gray;
Mat frame0;

inline bool isBlack(int x, uint8_t *row)
{
	int r = row[3 * x + 2];
	int g = row[3 * x + 1];
	int b = row[3 * x + 0];

	return ((b*0.0722 + g*0.7152 + r*0.2126) < 60);
}

Mat src, src_gray;
Mat x2y2, xy, mtrace, x_derivative, y_derivative, x2_derivative, y2_derivative,
xy_derivative, x2g_derivative, y2g_derivative, xyg_derivative, dst, dst_norm, dst_norm_scaled;
int thresh = 128;
char* corners_window = "Corners detected";
void onTrackbar(int, void*);


int main(int argc, char** argv)
{
	// имя файла задаётся первым параметром
	char* filename = argc == 2 ? argv[1] : "C:\\Users\\Люба\\Desktop\\Универ\\4 курс\\ARDUINO\\hakaton_video\\p8.avi";

	printf("[i] file: %s\n", filename);

	// окно для отображения картинки
	//cvNamedWindow("original", CV_WINDOW_AUTOSIZE);

	// получаем информацию о видео-файле
	CvCapture* capture = cvCreateFileCapture(filename);


	while (1){
		// получаем следующий кадр
		frame = cvQueryFrame(capture);
		// здесь можно вставить процедуру обработки
		/*if (!frame) {
		break;
		}*/
		cvtColor(frame, src_gray, COLOR_BGR2GRAY);
		Canny(frame, src_gray, 100, 200, 3);

		onTrackbar(thresh, 0);


		char c = cvWaitKey(0);
		if (c == 27) { // если нажата ESC - выходим
			break;
		}
	}

	// освобождаем ресурсы
	cvReleaseCapture(&capture);
	// удаляем окно
	cvDestroyWindow("original");
	return 0;
}


void onTrackbar(int, void*){
	//to calculate x and y derivative of image we use Sobel function
	Sobel(src_gray, x_derivative, CV_32FC1, 1, 0, 3, BORDER_DEFAULT);
	Sobel(src_gray, y_derivative, CV_32FC1, 0, 1, 3, BORDER_DEFAULT);
	
  //calculate other three images in M
	pow(x_derivative, 2.0, x2_derivative);
	pow(y_derivative, 2.0, y2_derivative);
	multiply(x_derivative, y_derivative, xy_derivative);
	
  //apply gaussain
	GaussianBlur(x2_derivative, x2g_derivative, Size(7, 7), 2.0, 0.0, BORDER_DEFAULT);
	GaussianBlur(y2_derivative, y2g_derivative, Size(7, 7), 0.0, 2.0, BORDER_DEFAULT);
	GaussianBlur(xy_derivative, xyg_derivative, Size(7, 7), 2.0, 2.0, BORDER_DEFAULT);
	
  //calculating R with k=0.04
	multiply(x2g_derivative, y2g_derivative, x2y2);
	multiply(xyg_derivative, xyg_derivative, xy);
	pow((x2g_derivative + y2g_derivative), 2.0, mtrace);
	dst = (x2y2 - xy) - 0.04 * mtrace;
	
  //normalizing result from 0 to 255
	normalize(dst, dst_norm, 0, 255, NORM_MINMAX, CV_32FC1, Mat());
	convertScaleAbs(dst_norm, dst_norm_scaled);
	
  // Drawing a circle around corners
	for (int j = 0; j < src_gray.rows; j++)
	{
		for (int i = 0; i < src_gray.cols; i++)
		{
			if ((int)dst_norm.at<float>(j, i) > thresh)
			{
				circle(src_gray, Point(i, j), 5, Scalar(255), 2, 8, 0);
			}
		}
	}
	
	namedWindow(corners_window, CV_WINDOW_AUTOSIZE);
	imshow(corners_window, src_gray);
}
